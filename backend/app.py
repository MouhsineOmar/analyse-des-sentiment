from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import numpy as np
import cv2
import tensorflow as tf
import base64 # Importation n√©cessaire pour d√©coder l'image base64
from werkzeug.utils import secure_filename
from datetime import datetime

# Initialisation de l'application
app = Flask(__name__)
CORS(app)  # Permet les requ√™tes depuis React

# Configuration du dossier d'upload (peut √™tre utile pour le d√©bogage, mais pas strictement n√©cessaire si on traite l'image en m√©moire)
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Charger le mod√®le
# Assurez-vous que 'faciales.h5' est dans le m√™me r√©pertoire que votre script Flask
try:
    model = tf.keras.models.load_model('faciales.h5')
    print("Mod√®le TensorFlow charg√© avec succ√®s.")
except Exception as e:
    print(f"Erreur lors du chargement du mod√®le : {e}")
    # G√©rer l'erreur, par exemple en arr√™tant l'application ou en d√©sactivant la fonctionnalit√© de pr√©diction
    model = None # S'assurer que le mod√®le est None si le chargement √©choue

# ‚úÖ Liste des √©motions reconnues (doit correspondre √† l'ordre dans le mod√®le et au frontend)
# Assurez-vous que cet ordre correspond √† l'ordre de sortie de votre mod√®le et √† 'emotionsList' dans React
emotion_labels = ['angry', 'disgust', 'fear', 'happy', 'neutral', 'sad', 'surprise']


# üîç Pr√©traitement image
def preprocess_image_from_base64(base64_string):
    # Supprimer le pr√©fixe "data:image/jpeg;base64," si pr√©sent
    if "base64," in base64_string:
        base64_string = base64_string.split("base64,")[1]

    # D√©coder la cha√Æne base64 en bytes
    img_bytes = base64.b64decode(base64_string)

    # Convertir les bytes en tableau numpy
    np_arr = np.frombuffer(img_bytes, np.uint8)

    # Lire l'image avec OpenCV
    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

    if img is None:
        raise ValueError("Impossible de d√©coder l'image. Le format est-il correct ?")

    # Convertir en niveaux de gris
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Redimensionner √† 48x48 pixels
    resized = cv2.resize(gray, (48, 48))

    # Normaliser les pixels entre 0 et 1
    normalized = resized / 255.0

    # Ajouter les dimensions n√©cessaires pour le mod√®le (batch_size, height, width, channels)
    reshaped = np.reshape(normalized, (1, 48, 48, 1))
    return reshaped

# üì§ Route de d√©tection d'√©motion
# Le frontend envoie √† '/detect_emotion'
@app.route('/detect_emotion', methods=['POST'])
def detect_emotion():
    if model is None:
        return jsonify({'error': 'Le mod√®le de d√©tection d\'√©motion n\'a pas pu √™tre charg√©.'}), 500

    # V√©rifier si la requ√™te contient des donn√©es JSON
    if not request.is_json:
        return jsonify({'error': 'La requ√™te doit √™tre au format JSON.'}), 400

    data = request.get_json()

    # V√©rifier si la cl√© 'image' est pr√©sente dans les donn√©es JSON
    if 'image' not in data:
        return jsonify({'error': 'Aucune image (base64) re√ßue dans le corps de la requ√™te JSON.'}), 400

    image_base64 = data['image']

    try:
        # Pr√©traiter l'image
        processed_image = preprocess_image_from_base64(image_base64)

        # Effectuer la pr√©diction
        predictions = model.predict(processed_image)[0] # Obtenir les scores de probabilit√© pour chaque √©motion

        # Trouver l'√©motion avec le score le plus √©lev√©
        detected_emotion_index = np.argmax(predictions)
        detected_emotion_label = emotion_labels[detected_emotion_index]

        # Convertir les scores numpy en liste Python pour jsonify
        scores_list = predictions.tolist()

        # Retourner l'√©motion d√©tect√©e et tous les scores
        return jsonify({
            'emotion': detected_emotion_label,
            'scores': scores_list # Retourne la liste compl√®te des scores
        })

    except ValueError as ve:
        return jsonify({'error': str(ve)}), 400
    except Exception as e:
        print(f"Erreur inattendue lors du traitement de l'image : {e}")
        return jsonify({'error': f'Erreur interne du serveur lors du traitement de l\'image: {e}'}), 500

# Lancer le serveur
if __name__ == '__main__':
    # Utilisez host='0.0.0.0' pour rendre le serveur accessible depuis d'autres machines sur le r√©seau local
    # (utile si votre frontend React n'est pas sur le m√™me localhost que Flask)
    app.run(debug=True, host='127.0.0.1', port=5000)

